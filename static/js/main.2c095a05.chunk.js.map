{"version":3,"sources":["styles/images/login-img.png","actions/index.js","reducers/user.js","reducers/score.js","reducers/settings.js","reducers/index.js","store/index.js","pages/Feedback.js","pages/Login.js","pages/Ranking.js","pages/Settings.js","components/Header.js","components/Loading.js","components/Questions.js","pages/Trivia.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","INITIAL_STATE","name","email","token","load","user","state","action","type","payload","score","asserts","categories","dificult","settings","typeValue","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","window","Cypress","Feedback","this","setRankingInLocalStorage","getPlayerSpecs","JSON","parse","localStorage","getItem","player","picture","newPlayer","ranking","getLocalStorageRanking","verifyLocalStorageRanking","push","setItem","stringify","storageRanking","className","data-testid","src","alt","props","playerAsserts","playerScore","renderPlayerSpecs","to","React","Component","connect","Login","handleChange","bind","inputsValidation","handleGetEmail","tokenRequire","target","value","setState","fetchAPI","tokenAPI","emailValidation","test","length","getEmail","placeholder","onChange","id","loginImage","nameAndEmailInputs","disabled","onClick","dispatch","a","async","fetch","fetchGet","json","response","emailInput","nameInput","loginAction","Ranking","scores","sort","b","index","assertions","gravatarEmail","players","sortByScore","map","buildsPlayerResults","resetPlayerSpecs","renderPlayersResults","Settings","result","dificulty","loading","fetchQuestionsAndAnswers","makeProps","getSettings","trivia_categories","category","key","categoriesValue","dificultValue","getSettingsAction","Header","criptoEmail","imgGravatar","emailCript","gravatar","setPlayerInLocalStorage","updatePlayerSpecsInLocalStorage","nameUser","emailUser","stringEmail","md5","toString","fetchGravatar","url","Loading","Questions","trivias","indexQuestion","activeButton","time","arrayOfQuestions","showButtonNext","makeTrivias","questionTimer","calculateScore","getScore","results","nextQuestion","redirectToFeedback","setInterval","clearInterval","answer","correctAnswer","correct_answer","atob","difficulty","question","allQuestions","incorrect_answers","buttons","Math","random","answerColor","activeButtonNext","makeTriviasRender","scoreValue","assertsValue","getScoreAction","Trivia","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c095a05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login-img.8b25c570.png\";","export const GET_EMAIL = 'GET_EMAIL';\nexport const GET_TOKEN = 'GET_TOKEN';\nexport const GET_TOKEN_SUCCESS = 'GET_TOKEN_SUCCESS';\nexport const GET_TOKEN_LOAD = 'GET_TOKEN_LOAD';\nexport const GET_TIMER = 'GET_TIMER';\nexport const GET_SCORE = 'GET_SCORE';\nexport const GET_SETTINGS = 'GET_SETTINGS';\n\n// action para pegar o email e nome do login\nexport function loginAction(emailInput, nameInput) {\n  return {\n    type: GET_EMAIL,\n    name: nameInput,\n    email: emailInput,\n  };\n}\n\nexport function getTokenAction() {\n  return {\n    type: GET_TOKEN,\n  };\n}\n\nexport function getScoreAction(scoreValue, assertsValue) {\n  return {\n    type: GET_SCORE,\n    score: scoreValue,\n    asserts: assertsValue,\n  };\n}\n\nexport function getSettingsAction(categoriesValue, dificultValue, typeValue) {\n  return {\n    type: GET_SETTINGS,\n    categories: categoriesValue,\n    dificult: dificultValue,\n    typeValue,\n  };\n}\n\nexport function getTokenActionSucess(payload) {\n  return {\n    type: GET_TOKEN_SUCCESS,\n    payload,\n    load: false,\n  };\n}\n\nexport function getTokenActionLoading() {\n  return {\n    type: GET_TOKEN_LOAD,\n  };\n}\n\nexport const fetchAPItoken = () => async (dispatch) => {\n  dispatch(getTokenAction());\n  const fetchGet = await fetch('https://opentdb.com/api_token.php?command=request');\n  const response = await fetchGet.json();\n  const { token } = response;\n  dispatch(getTokenActionSucess(token));\n};\n","import {\n  GET_TOKEN,\n  GET_TOKEN_SUCCESS,\n  GET_TOKEN_LOAD,\n  GET_EMAIL,\n} from '../actions/index';\n\nconst INITIAL_STATE = {\n  name: '',\n  email: '',\n  token: '',\n  load: false,\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_EMAIL:\n    return {\n      name: action.name,\n      email: action.email,\n    };\n  case GET_TOKEN:\n    return {\n      ...state,\n    };\n  case GET_TOKEN_SUCCESS:\n    return {\n      ...state,\n      token: action.payload,\n      load: action.load,\n    };\n  case GET_TOKEN_LOAD:\n    return {\n      ...state, load: true,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import { GET_SCORE } from '../actions/index';\n\nconst INITIAL_STATE = {\n  score: 0,\n  asserts: 0,\n};\n\nconst score = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_SCORE:\n    return {\n      score: action.score,\n      asserts: action.asserts,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default score;\n","import { GET_SETTINGS } from '../actions/index';\n\nconst INITIAL_STATE = {\n  categories: '',\n  dificult: '',\n  type: '',\n};\n\nconst settings = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_SETTINGS:\n    return {\n      categories: action.categories,\n      dificult: action.dificult,\n      type: action.typeValue,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default settings;\n","import { combineReducers } from 'redux';\nimport user from './user'; // reducer para a action de pegar o nome e email do login\nimport score from './score'; // reducer para o timer das perguntas\nimport settings from './settings'; // reducer para o timer das perguntas\n\nconst rootReducer = combineReducers({\n  user,\n  score,\n  settings,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\nexport default store;\n\nif (window.Cypress) {\n  window.store = store;\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/Feedback.css';\n\nclass Feedback extends React.Component {\n  componentDidMount() {\n    this.setRankingInLocalStorage(this.getPlayerSpecs());\n  }\n\n  // função que retorna as informações do jogador que estão salvas no localStorage\n  getPlayerSpecs() {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    return player;\n  }\n\n  // função que retorna a lista de jogadores guardada no localStorage\n  getLocalStorageRanking() {\n    const rankingKey = JSON.parse(localStorage.getItem('ranking'));\n    return rankingKey;\n  }\n\n  // função que salva a lista de jogadores no localStorage\n  setRankingInLocalStorage({ picture, name, score }) {\n    const newPlayer = {\n      name,\n      score,\n      picture,\n    };\n\n    const ranking = this.getLocalStorageRanking();\n    const isRanking = this.verifyLocalStorageRanking(ranking);\n\n    if (!isRanking) {\n      localStorage.setItem('ranking', JSON.stringify([newPlayer]));\n    } else {\n      ranking.push(newPlayer);\n      localStorage.setItem('ranking', JSON.stringify(ranking));\n    }\n  }\n\n  // função que verifica se o existe a chave ranking no localStorage\n  verifyLocalStorageRanking(storageRanking) {\n    if (!storageRanking) return false;\n    return true;\n  }\n\n  renderPlayerSpecs({ picture, name, score }) {\n    return (\n      <header className=\"header-feedback\">\n        <img data-testid=\"header-profile-picture\" src={ picture } alt={ name } />\n        <p data-testid=\"header-player-name\">{ name }</p>\n        <p data-testid=\"header-score\">{ score }</p>\n      </header>\n    );\n  }\n\n  render() {\n    const controlNumber = 3;\n    const { playerAsserts, playerScore } = this.props;\n    return (\n      <div className=\"feedback\">\n        <div className=\"main\">\n          <div>\n            {this.renderPlayerSpecs(this.getPlayerSpecs())}\n          </div>\n          <div className=\"div-messages\">\n            <div className=\"div-msg\">\n              <p data-testid=\"feedback-total-question\">\n                {playerAsserts}\n              </p>\n              <p data-testid=\"feedback-text\">\n                { playerAsserts < controlNumber ? 'Podia ser melhor...' : 'Mandou bem!' }\n              </p>\n              <p data-testid=\"feedback-total-score\">\n                {playerScore}\n              </p>\n            </div>\n          </div>\n          <div className=\"div-button\">\n            <Link to=\"/ranking\">\n              <button\n                className=\"button-ranking\"\n                data-testid=\"btn-ranking\"\n                type=\"button\"\n              >\n                Ver Ranking\n              </button>\n            </Link>\n            <Link to=\"/\">\n              <button\n                className=\"button-play-again\"\n                data-testid=\"btn-play-again\"\n                type=\"button\"\n              >\n                Jogar novamente\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  playerAsserts: state.score.asserts,\n  playerScore: state.score.score,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n\nFeedback.propTypes = {\n  nameUser: PropTypes.string,\n  emailUser: PropTypes.string,\n}.isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { loginAction, fetchAPItoken } from '../actions/index';\nimport '../styles/Login.css';\nimport loginImage from '../styles/images/login-img.png';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.inputsValidation = this.inputsValidation.bind(this);\n    this.handleGetEmail = this.handleGetEmail.bind(this);\n    this.tokenRequire = this.tokenRequire.bind(this);\n\n    this.state = {\n      name: false,\n      email: false,\n    };\n  }\n\n  componentWillUnmount() {\n    this.handleGetEmail();\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async tokenRequire() {\n    const { fetchAPI, tokenAPI } = this.props;\n    fetchAPI();\n    localStorage.setItem('token', tokenAPI);\n  }\n\n  inputsValidation() {\n    const { email, name } = this.state;\n    const emailValidation = /(.*)@(.*).com/.test(email);\n    const charactersName = name.length;\n    const minimoName = 1;\n    if (charactersName >= minimoName && emailValidation === true) {\n      return false;\n    }\n    return true;\n  }\n\n  // manda pro estado do redux o nome e email do jogador\n  handleGetEmail() {\n    const { email, name } = this.state;\n    const { getEmail } = this.props;\n    getEmail(email, name);\n  }\n\n  nameAndEmailInputs() {\n    return (\n      <>\n        <input\n          name=\"name\"\n          type=\"text\"\n          data-testid=\"input-player-name\"\n          placeholder=\"Coloque seu nome aqui :)\"\n          onChange={ this.handleChange }\n        />\n        <input\n          name=\"email\"\n          id=\"email\"\n          type=\"email\"\n          data-testid=\"input-gravatar-email\"\n          placeholder=\"E-mail aqui :)\"\n          onChange={ this.handleChange }\n        />\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"login-page\">\n        <div className=\"login-box\">\n          <div className=\"left\">\n            <img src={ loginImage } className=\"img-login\" alt=\"login\" />\n          </div>\n          <div className=\"right\">\n            <h6 className=\"login-title-span\">Bem vindo(a) ao</h6>\n            <h4 className=\"login-title\">Kahootrivia</h4>\n            <form className=\"form-login\">\n              { this.nameAndEmailInputs() }\n            </form>\n            <Link to=\"/trivia\">\n              <button\n                className=\"button-play\"\n                disabled={ this.inputsValidation() }\n                data-testid=\"btn-play\"\n                type=\"button\"\n                onClick={ () => this.tokenRequire() }\n              >\n                JOGAR\n              </button>\n            </Link>\n            <Link to=\"/settings\">\n              <button\n                className=\"settings-link\"\n                data-testid=\"btn-settings\"\n                type=\"button\"\n                onClick={ () => this.tokenRequire() }\n              >\n                CONFIGURAÇÕES\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>);\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAPI: () => dispatch(fetchAPItoken()),\n  getEmail: (emailInput, nameInput) => dispatch(loginAction(emailInput, nameInput)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  getEmail: PropTypes.func,\n  fetchAPI: PropTypes.func,\n  tokenAPI: PropTypes.string,\n}.isRequired;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/Ranking.css';\n\nclass Ranking extends React.Component {\n  // armazena a lista de pessoas no ranking\n  getLocalStorageRanking() {\n    const rankingKey = JSON.parse(localStorage.getItem('ranking'));\n    return rankingKey;\n  }\n\n  // função que ordena os jogadores pela pontuação\n  sortByScore(scores) {\n    return scores.sort((a, b) => (b.score - a.score));\n  }\n\n  // constrói a estrutura das informações de cada pessoa na página de ranking\n  buildsPlayerResults({ name, picture, score }, index) {\n    return (\n      <ul className=\"player-specs\">\n        <li className=\"ranking-img\">\n          <img src={ picture } alt={ name } className=\"img-render-ranking\" />\n        </li>\n        <li className=\"ranking-name\" data-testid={ `player-name-${index}` }>{ name }</li>\n        <li\n          className=\"ranking-score\"\n          data-testid={ `player-score-${index}` }\n        >\n          { score }\n\n        </li>\n      </ul>\n    );\n  }\n\n  resetPlayerSpecs() {\n    const playerReseted = {\n      assertions: 0,\n      gravatarEmail: '',\n      name: '',\n      picture: '',\n      score: 0,\n    };\n    localStorage.setItem('state', JSON.stringify({ player: playerReseted }));\n  }\n\n  // função para renderizar a lista de ranking\n  renderPlayersResults() {\n    const players = this.getLocalStorageRanking();\n    const playersSorted = this.sortByScore(players);\n    return playersSorted.map((player, index) => this.buildsPlayerResults(player, index));\n  }\n\n  render() {\n    return (\n      <div className=\"ranking\">\n        <div className=\"title-button\">\n          <h1 data-testid=\"ranking-title\">Ranking</h1>\n          <Link to=\"/\">\n            <button\n              className=\"button-start\"\n              data-testid=\"btn-go-home\"\n              type=\"button\"\n              onClick={ this.resetPlayerSpecs }\n            >\n              Início\n            </button>\n          </Link>\n        </div>\n        <div className=\"players\">\n          {/* Requisito 18 precisa que o requisito 10 esteja pronto */}\n          { this.renderPlayersResults() }\n        </div>\n      </div>);\n  }\n}\n\nexport default Ranking;\n","import React from 'react';\nimport '../styles/Settings.css';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getSettingsAction } from '../actions';\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      result: '',\n      categories: '',\n      dificulty: '',\n      type: '',\n      loading: true,\n    };\n    this.fetchQuestionsAndAnswers = this.fetchQuestionsAndAnswers.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchQuestionsAndAnswers();\n  }\n\n  componentDidUpdate() {\n    this.makeProps();\n  }\n\n  makeProps() {\n    const { categories, dificulty, type } = this.state;\n    const { getSettings } = this.props;\n\n    getSettings(categories, dificulty, type);\n  }\n\n  async fetchQuestionsAndAnswers() {\n    const url = 'https://opentdb.com/api_category.php';\n    const fetchAPI = await fetch(url);\n    const response = await fetchAPI.json();\n    const result = response.trivia_categories;\n\n    this.setState({\n      result,\n      loading: false,\n    });\n  }\n\n  handleChange({ target }) {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { result, loading } = this.state;\n    if (loading) {\n      return (<h1>Loading...</h1>);\n    }\n    return (\n      <div className=\"settings-page\">\n        <div className=\"settings-text\">\n          <h1 data-testid=\"settings-title\">SETTINGS</h1>\n        </div>\n        <div className=\"inputs-settings\">\n          <select className=\"categories\" name=\"categories\" onChange={ this.handleChange }>\n            { result.map((category) => (\n              <option key={ category.id } value={ category.id }>\n                { category.name }\n              </option>\n            )) }\n          </select>\n          <select className=\"dificulty\" name=\"dificulty\" onChange={ this.handleChange }>\n            <option value=\"any\">Any Difficulty</option>\n            <option value=\"easy\">Easy</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"hard\">Hard</option>\n          </select>\n\n          <select className=\"type\" name=\"type\" onChange={ this.handleChange }>\n            <option value=\"any\">Any Type</option>\n            <option value=\"multiple\">Multiple Choice</option>\n            <option value=\"boolean\">True / False</option>\n          </select>\n        </div>\n\n        <div className=\"settings-button-home\">\n          <Link to=\"/\">\n            <button className=\"settings\" type=\"button\">\n              VOLTAR PARA PAGINA INICIAL\n            </button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToprops = (dispatch) => ({\n  getSettings: (categoriesValue, dificultValue, typeValue) => dispatch(\n    getSettingsAction(categoriesValue, dificultValue, typeValue),\n  ),\n});\n\nexport default connect(null, mapDispatchToprops)(Settings);\n\nSettings.propTypes = {\n  getSettings: PropTypes.func,\n}.isRequired;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\n\nclass Header extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      criptoEmail: '',\n      imgGravatar: '',\n    };\n\n    this.emailCript = this.emailCript.bind(this);\n    this.gravatar = this.gravatar.bind(this);\n    this.setPlayerInLocalStorage = this.setPlayerInLocalStorage.bind(this);\n  }\n\n  async componentDidMount() {\n    this.emailCript();\n    await this.gravatar();\n    this.setPlayerInLocalStorage();\n  }\n\n  componentDidUpdate() {\n    this.updatePlayerSpecsInLocalStorage();\n  }\n\n  // função que guarda as informações do jogador no localStorage\n  setPlayerInLocalStorage() {\n    const { criptoEmail, imgGravatar } = this.state;\n    const { nameUser } = this.props;\n    const player = {\n      name: nameUser,\n      assertions: 0,\n      score: 0,\n      gravatarEmail: criptoEmail,\n      picture: imgGravatar,\n    };\n\n    localStorage.setItem('state', JSON.stringify({ player }));\n  }\n\n  updatePlayerSpecsInLocalStorage() {\n    const { criptoEmail, imgGravatar } = this.state;\n    const { nameUser, playerScore, playerAsserts } = this.props;\n    const player = {\n      name: nameUser,\n      assertions: playerAsserts,\n      score: playerScore,\n      gravatarEmail: criptoEmail,\n      picture: imgGravatar,\n    };\n\n    localStorage.setItem('state', JSON.stringify({ player }));\n  }\n\n  // criptografia do email para a api gravatar\n  emailCript() {\n    const { emailUser } = this.props;\n    const stringEmail = md5(emailUser).toString();\n    this.setState({\n      criptoEmail: stringEmail,\n    });\n  }\n\n  // função para pegar a imagem na api do gravatar\n  async gravatar() {\n    const { criptoEmail } = this.state;\n    const fetchGravatar = await fetch(`https://www.gravatar.com/avatar/${criptoEmail}`);\n    this.setState({\n      imgGravatar: fetchGravatar.url,\n    });\n  }\n\n  render() {\n    const { imgGravatar } = this.state;\n    const { nameUser, playerScore } = this.props;\n    return (\n      <div className=\"header\">\n        <header>\n          <img\n            alt=\"imagem jogador\"\n            data-testid=\"header-profile-picture\"\n            src={ imgGravatar }\n          />\n          <p data-testid=\"header-player-name\">{ nameUser }</p>\n          <p data-testid=\"header-score\">\n            { playerScore }\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  nameUser: state.user.name,\n  emailUser: state.user.email,\n  playerScore: state.score.score,\n  playerAsserts: state.score.asserts,\n});\n\nexport default connect(mapStateToProps)(Header);\n\n// proptypes do componente Header\nHeader.propTypes = {\n  nameUser: PropTypes.string,\n  emailUser: PropTypes.string,\n}.isRequired;\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Loading from './Loading';\nimport { getScoreAction } from '../actions';\nimport '../styles/Questions.css';\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      trivias: '',\n      loading: true,\n      indexQuestion: 0,\n      activeButton: false,\n      disabled: false,\n      time: 30,\n      score: 0,\n      asserts: 0,\n      arrayOfQuestions: [],\n    };\n\n    this.fetchQuestionsAndAnswers = this.fetchQuestionsAndAnswers.bind(this);\n    this.showButtonNext = this.showButtonNext.bind(this);\n    this.makeTrivias = this.makeTrivias.bind(this);\n    this.questionTimer = this.questionTimer.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchQuestionsAndAnswers();\n    this.questionTimer();\n  }\n\n  makeProps() {\n    const { score, asserts } = this.state;\n    const { getScore } = this.props;\n    getScore(score, asserts);\n  }\n\n  async fetchQuestionsAndAnswers() {\n    const { token, categories, dificult, type } = this.props;\n    const url = `https://opentdb.com/api.php?amount=5&category=${categories}&difficulty=${dificult}&type=${type}&encode=base64&token=${token}`;\n    const fetchAPI = await fetch(url);\n    const response = await fetchAPI.json();\n    const { results } = response;\n\n    this.setState({\n      trivias: results,\n      loading: false,\n    });\n  }\n\n  activeButtonNext() {\n    const { activeButton, indexQuestion } = this.state;\n    const questionsLimit = 4;\n    return (\n      <button\n        className={ activeButton ? '' : 'nextButton' }\n        type=\"button\"\n        data-testid=\"btn-next\"\n        onClick={ () => this.nextQuestion() }\n      >\n        { indexQuestion === questionsLimit ? this.redirectToFeedback() : 'Próxima' }\n      </button>\n    );\n  }\n\n  redirectToFeedback() {\n    return (\n      <Link to=\"/feedback\">\n        Próxima\n      </Link>\n    );\n  }\n\n  questionTimer() {\n    const plus = 1000;\n    const questionTimer = setInterval(() => {\n      const { time, disabled } = this.state;\n      if (!disabled) {\n        this.setState({\n          time: time - 1,\n        });\n      }\n      if (time <= 0 || disabled) {\n        clearInterval(questionTimer);\n        this.setState({\n          disabled: true,\n          time,\n          activeButton: true,\n        });\n        clearInterval(questionTimer);\n      }\n    }, plus);\n  }\n\n  nextQuestion() {\n    const { indexQuestion } = this.state;\n    this.setState({\n      indexQuestion: indexQuestion + 1,\n      activeButton: false,\n      disabled: false,\n      time: 30,\n      arrayOfQuestions: [],\n    }, () => this.questionTimer());\n  }\n\n  showButtonNext() {\n    this.setState({\n      activeButton: true,\n      disabled: true,\n    });\n  }\n\n  answerColor(answer) {\n    const { activeButton, indexQuestion, trivias } = this.state;\n    const correctAnswer = trivias[indexQuestion].correct_answer;\n\n    if (activeButton) {\n      return (answer === correctAnswer ? 'green-border' : 'red-border');\n    }\n  }\n\n  calculateScore() {\n    const { time, trivias, indexQuestion, score, asserts } = this.state;\n    const easy = 'easy';\n    const medium = 'medium';\n    const hard = 'hard';\n    const three = 3;\n    const baseValue = 10;\n    const questionDificulty = window.atob(trivias[indexQuestion].difficulty);\n    switch (questionDificulty) {\n    case easy:\n      this.setState({\n        score: score + baseValue + (1 * time),\n        asserts: asserts + 1,\n        activeButton: true,\n        disabled: true,\n      }, () => this.makeProps());\n      break;\n    case medium:\n      this.setState({\n        score: score + baseValue + (2 * time),\n        asserts: asserts + 1,\n        activeButton: true,\n        disabled: true,\n      }, () => this.makeProps());\n      break;\n    case hard:\n      this.setState({\n        score: score + baseValue + (three * time),\n        asserts: asserts + 1,\n        activeButton: true,\n        disabled: true,\n      }, () => this.makeProps());\n      break;\n    default:\n      this.state({\n        activeButton: true,\n        disabled: true,\n      });\n    }\n  }\n\n  makeTrivias() { // Renderiza Perguntas da Trivia.\n    const { trivias, indexQuestion, disabled, arrayOfQuestions, time } = this.state;\n    const { category, question } = trivias[indexQuestion];\n    const randomizator = 0.5;\n    let allQuestions = [trivias[indexQuestion].correct_answer,\n      ...trivias[indexQuestion].incorrect_answers];\n    const correctAnswer = trivias[indexQuestion].correct_answer;\n    const buttons = arrayOfQuestions.length > 0\n      ? arrayOfQuestions\n      : allQuestions = allQuestions.sort(() => Math.random() - randomizator);\n    if (arrayOfQuestions.length === 0) {\n      this.setState({\n        arrayOfQuestions: buttons,\n      });\n    }\n    return (\n      <div>\n        <span className=\"timer\">{ time }</span>\n        <h1 data-testid=\"question-category\">{ window.atob(category) }</h1>\n        <div className=\"question-box\">\n          <div className=\"left-questions\">\n            <h2 data-testid=\"question-text\">{ window.atob(question) }</h2>\n          </div>\n          <div className=\"right-questions\">\n            <ol>\n              { buttons.map(((answer, index) => (\n                <li key={ index }>\n                  <button\n                    name={ answer === correctAnswer ? 'correct' : 'incorrect' }\n                    type=\"button\"\n                    className={ `${this.answerColor(answer)} answers` }\n                    onClick={ answer === correctAnswer\n                      ? this.calculateScore : this.showButtonNext }\n                    disabled={ disabled }\n                    data-testid={ answer === correctAnswer\n                      ? 'correct-answer' : `wrong-answer-${index}` }\n                  >\n                    { window.atob(answer) }\n                  </button>\n                </li>\n              ))) }\n            </ol>\n            <div className=\"btn-next-div\">\n              { this.activeButtonNext() }\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  makeTriviasRender() {\n    const { loading } = this.state;\n    return loading ? <h1>Loading await...</h1> : this.makeTrivias();\n  }\n\n  render() {\n    const { load } = this.props;\n    return load ? <Loading /> : this.makeTriviasRender();\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  load: state.user.load,\n  token: state.user.token,\n  categories: state.settings.categories,\n  dificult: state.settings.dificult,\n  type: state.settings.type,\n});\n\nconst mapDispatchToprops = (dispatch) => ({\n  getScore: (scoreValue, assertsValue) => dispatch(\n    getScoreAction(scoreValue, assertsValue),\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToprops)(Questions);\n\nQuestions.propTypes = {\n  timeValue: PropTypes.number,\n  disabledValue: PropTypes.bool,\n}.isRequired;\n","import React, { Component } from 'react';\nimport Header from '../components/Header';\nimport Questions from '../components/Questions';\nimport '../styles/Trivia.css';\n\nclass Trivia extends Component {\n  render() {\n    return (\n      <div className=\"trivia-page\">\n        <Header />\n        <Questions />\n      </div>);\n  }\n}\n\nexport default Trivia;\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Feedback from './pages/Feedback';\nimport Login from './pages/Login';\nimport Ranking from './pages/Ranking';\nimport Settings from './pages/Settings';\nimport Trivia from './pages/Trivia';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={ Login } />\n          <Route exact path=\"/settings\" component={ Settings } />\n          <Route exact path=\"/trivia\" component={ Trivia } />\n          <Route exact path=\"/feedback\" component={ Feedback } />\n          <Route exact path=\"/ranking\" component={ Ranking } />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>, document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}